# -*- coding: cp1252 -*-
#
# this class encapsulate the metadata info for products 
#
#
import sys
import traceback
#
import base_metadata
from base_metadata import Base_Metadata
from valid_values import Valid_Values


#
VALUE_OPTIONAL=base_metadata.VALUE_OPTIONAL
VALUE_CONDITIONS=base_metadata.VALUE_CONDITIONS
VALUE_UNKNOWN=base_metadata.VALUE_UNKNOWN
VALUE_NONE=base_metadata.VALUE_NONE
VALUE_NOT_PRESENT=base_metadata.VALUE_NOT_PRESENT


METADATA_ACQUISITION_CENTER='METADATA_ACQUISITION_CENTER'
METADATA_ACQUISITION_DATE='METADATA_ACQUISITION_DATE'
METADATA_ACQUISITION_TYPE='METADATA_ACQUISITION_TYPE'
METADATA_ANTENNA_LOOK_DIRECTION='METADATA_ANTENNA_LOOK_DIRECTION'
METADATA_CODESPACE_ACQUISITION_STATION='METADATA_CODESPACE_ACQUISITION_STATION'
METADATA_ASCENDING_NODE_DATE='METADATA_ASCENDING_NODE_DATE'
METADATA_ASCENDING_NODE_LONGITUDE='METADATA_ASCENDING_NODE_LONGITUDE'
METADATA_START_TIME_FROM_ASCENDING_NODE='METADATA_START_TIME_FROM_ASCENDING_NODE'
METADATA_COLLECTION_NAME='METADATA_COLLECTION_NAME'
METADATA_COMPLETION_TIME_FROM_ASCENDING_NODE='METADATA_COMPLETION_TIME_FROM_ASCENDING_NODE'

METADATA_BOUNDING_BOX='METADATA_BOUNDING_BOX'
METADATA_BOUNDING_BOX_CW_CLOSED='METADATA_BOUNDING_BOX_CW_CLOSED'
METADATA_BROWSE_CHOICE='METADATA_BROWSE_CHOICE'
METADATA_BROWSES_TYPE='METADATA_BROWSES_TYPE'
METADATA_CITY='METADATA_CITY'
METADATA_CODESPACE_REFERENCE_SYSTEM='METADATA_CODESPACE_REFERENCE_SYSTEM'
METADATA_CLOUD_COVERAGE='METADATA_CLOUD_COVERAGE'
METADATA_CLOUD_COVERAGE_QUOTATION_MODE='METADATA_CLOUD_COVERAGE_QUOTATION_MODE'
METADATA_COUNTRY='METADATA_COUNTRY'
METADATA_CREATOR='METADATA_CREATOR'
METADATA_CYCLE='METADATA_CYCLE'
METADATA_DATASET_NAME='METADATA_DATASET_NAME'
METADATA_DATA_FILE_PATH='METADATA_DATA_FILE_PATH'
METADATA_DATASET_PRODUCTION_DATE='METADATA_DATASET_PRODUCTION_DATE'
METADATA_DATA_TYPE='METADATA_DATA_TYPE'
METADATA_DURATION='METADATA_DURATION'
METADATA_DURATION_HMS='METADATA_DURATION_HMS'
METADATA_DOI='METADATA_DOI'
METADATA_FILECLASS='METADATA_FILECLASS'
METADATA_FILECOUNTER='METADATA_FILECOUNTER'
# tells if the ingester is able to correct a duplicate situation
METADATA_CAN_AUTOCORRECT_FILECOUNTER='METADATA_CAN_AUTOCORRECT_FILECOUNTER'
METADATA_FILE_TYPE='METADATA_FILE_TYPE'
METADATA_FOOTPRINT='METADATA_FOOTPRINT'
METADATA_FOOTPRINT_CW='METADATA_FOOTPRINT_CW'
METADATA_FOOTPRINT_IMAGE_ROWCOL='METADATA_FOOTPRINT_IMAGE_ROWCOL'
METADATA_FRAME='METADATA_FRAME'
METADATA_GENERATION_TIME='METADATA_GENERATION_TIME'
METADATA_GEOMETRIC_PROCESSING='METADATA_GEOMETRIC_PROCESSING'
METADATA_GROUND_STATION_IDENTIFIER='METADATA_GROUND_STATION_IDENTIFIER'
METADATA_IDENTIFIER='METADATA_IDENTIFIER'
METADATA_IMAGING_MODE='METADATA_IMAGING_MODE'
METADATA_IMAGE_QUALITY='METADATA_IMAGE_QUALITY'
METADATA_IMAGE_NUM_ROWS='METADATA_IMAGE_NUM_ROWS'
METADATA_IMAGE_NUM_COLUMNS='METADATA_IMAGE_NUM_COLUMNS'
METADATA_INSTRUMENT_ACROSS_TRACK_INCIDENCE_ANGLE='METADATA_INSTRUMENT_ACROSS_TRACK_INCIDENCE_ANGLE'
METADATA_INSTRUMENT_ALONG_TRACK_INCIDENCE_ANGLE='METADATA_INSTRUMENT_ALONG_TRACK_INCIDENCE_ANGLE'
METADATA_INSTRUMENT_ZENITH_ANGLE='METADATA_INSTRUMENT_ZENITH_ANGLE'
METADATA_INSTRUMENT_ELEVATION_ANGLE='METADATA_INSTRUMENT_ELEVATION_ANGLE'
METADATA_INSTRUMENT_AZIMUTH_ANGLE='METADATA_INSTRUMENT_AZIMUTH_ANGLE'
METADATA_INSTRUMENT_INCIDENCE_ANGLE='METADATA_INSTRUMENT_INCIDENCE_ANGLE'
METADATA_INSTRUMENT='METADATA_INSTRUMENT'
METADATA_INSTRUMENT_ID='METADATA_INSTRUMENT_ID'
METADATA_INSTRUMENT_DESCRIPTION='METADATA_INSTRUMENT_DESCRIPTION'

# SAR:
METADATA_MINIMUM_INCIDENCE_ANGLE='minimumIncidenceAngle'
METADATA_MAXIMUM_INCIDENCE_ANGLE='maximumIncidenceAngle'
METADATA_INCIDENCE_ANGLE_VARIATION='incidenceAngleVariation'
METADATA_DOPPLER_FREQUENCY='dopplerFrequency'
#
METADATA_NATIVE_PRODUCT_FORMAT='METADATA_NATIVE_PRODUCT_FORMAT'
METADATA_NATIVE_PRODUCT_VERSION='METADATA_NATIVE_PRODUCT_VERSION'

METADATA_PITCH='METADATA_PITCH'
METADATA_ROLL='METADATA_ROLL'
METADATA_YAW='METADATA_YAW'
METADATA_ORBIT='METADATA_ORBIT'
METADATA_LAST_ORBIT='METADATA_LAST_ORBIT'
METADATA_ORBIT_DIRECTION='METADATA_ORBIT_DIRECTION'
METADATA_ORIGINAL_NAME='METADATA_ORIGINAL_NAME'
METADATA_PARENT_PRODUCT='METADATA_PARENT_PRODUCT'
METADATA_PARENT_IDENTIFIER='METADATA_PARENT_IDENTIFIER'
METADATA_PATH='METADATA_PATH'
METADATA_PHASE='METADATA_PHASE'
METADATA_PHASE_NUMBER='METADATA_PHASE_NUMBER'
METADATA_PHONE='METADATA_PHONE'
METADATA_PLATFORM='METADATA_PLATFORM'
METADATA_PLATFORM_2DIGITS_ALIAS='METADATA_PLATFORM_2DIGITS_ALIAS'
METADATA_PLATFORM_ID='METADATA_PLATFORM_ID'
METADATA_PROCESSING_MODE='METADATA_PROCESSING_MODE'
METADATA_PROCESSING_LEVEL='METADATA_PROCESSING_LEVEL'
METADATA_PROCESSING_STAGE='METADATA_PROCESSING_STAGE'
METADATA_PROCESSING_STAGE_FLAG='METADATA_PROCESSING_STAGE_FLAG'
METADATA_PROCESSING_TIME='METADATA_PROCESSING_TIME'
METADATA_PROCESSING_TYPE='METADATA_PROCESSING_TYPE'
METADATA_PROCESSING_CENTER='METADATA_PROCESSING_CENTER'
METADATA_CODESPACE_PROCESSING_CENTER='METADATA_CODESPACE_PROCESSING_CENTER'
# EO product name without extension
METADATA_PRODUCTNAME='METADATA_PRODUCTNAME'
# SIP package name without extension
METADATA_PACKAGENAME='METADATA_PACKAGENAME'
# EO product name with extension
METADATA_FULL_PRODUCTNAME='METADATA_FULL_PRODUCTNAME'
# SIP package name with extension
METADATA_FULL_PACKAGENAME='METADATA_FULL_PACKAGENAME'
METADATA_KMZ_USE_BOOUNDINGBOX='METADATA_KMZ_USE_BOOUNDINGBOX'
METADATA_KMZ_DONT_REVERSE_BROWSE='METADATA_KMZ_DONT_REVERSE_BROWSE'
METADATA_ORDER_ID='METADATA_ORDER_ID'
METADATA_POLARISATION_MODE='METADATA_POLARISATION_MODE'
METADATA_POLARISATION_CHANNELS='METADATA_POLARISATION_CHANNELS'
METADATA_PRODUCT_CLASS='METADATA_PRODUCT_CLASS'
METADATA_PRODUCT_TYPE='METADATA_PRODUCT_TYPE'
METADATA_PRODUCT_SIZE='METADATA_PRODUCT_SIZE'
METADATA_PRODUCT_SIZE_UOM='METADATA_PRODUCT_SIZE_UOM'
METADATA_PRODUCT_ID='METADATA_PRODUCT_ID'
METADATA_PRODUCT_RELATIVE_PATH='METADATA_PRODUCT_RELATIVE_PATH'
METADATA_PRODUCT_SOURCE='METADATA_PRODUCT_SOURCE'
METADATA_PROFILE='METADATA_PROFILE'
METADATA_QUALITY_STATUS='METADATA_QUALITY_STATUS'
METADATA_QUALITY_DEGRADATION='METADATA_QUALITY_DEGRADATION'
METADATA_QUALITY_DEGRADATION_QUOTATION_MODE='METADATA_QUALITY_DEGRADATION_QUOTATION_MODE'
METADATA_QUALITY_DEGRADATION_TAG='METADATA_QUALITY_DEGRADATION_TAG'
METADATA_QUALITY_REPORT_URL='METADATA_QUALITY_REPORT_URL'
METADATA_REFERENCE_SYSTEM_IDENTIFIER='METADATA_REFERENCE_SYSTEM_IDENTIFIER'
METADATA_REFERENCE_SYSTEM_IDENTIFIER_NAME='METADATA_REFERENCE_SYSTEM_IDENTIFIER_NAME'
METADATA_RELATIVE_ORBIT='METADATA_RELATIVE_ORBIT'
METADATA_RESPONSIBLE='METADATA_RESPONSIBLE'
METADATA_RESOLUTION='METADATA_RESOLUTION'
METADATA_RESOLUTION_UNIT='METADATA_RESOLUTION_UNIT'
METADATA_REPORT_TYPE='METADATA_REPORT_TYPE'
METADATA_SATELLITE='METADATA_SATELLITE'
METADATA_SATELLITE_ID='METADATA_SATELLITE_ID'
METADATA_SCALE='METADATA_SCALE'
METADATA_SCENE_CENTER='METADATA_SCENE_CENTER'
METADATA_SCENE_CENTER_LAT='METADATA_SCENE_CENTER_LAT'
METADATA_SCENE_CENTER_LON='METADATA_SCENE_CENTER_LON'
METADATA_SCENE_CENTER_TIME='METADATA_SCENE_CENTER_TIME'
METADATA_SENSOR_NAME='METADATA_SENSOR_NAME'
METADATA_SENSOR_TYPE='METADATA_SENSOR_TYPE'
METADATA_SENSOR_OPERATIONAL_MODE='METADATA_SENSOR_OPERATIONAL_MODE'
METADATA_CODESPACE_SENSOR_OPERATIONAL_MODE='METADATA_CODESPACE_SENSOR_OPERATIONAL_MODE'
METADATA_SENSOR_CODE='METADATA_SENSOR_CODE'
METADATA_SNOW_COVERAGE='METADATA_SNOW_COVERAGE'
METADATA_SOFTWARE_NAME='METADATA_SOFTWARE_NAME'
METADATA_SOFTWARE_VERSION='METADATA_SOFTWARE_VERSION'
METADATA_SRC_BROWSE_PATH='METADATA_SRC_BROWSE_PATH'
METADATA_SRC_THUMBNAIL_PATH='METADATA_SRC_THUMBNAIL_PATH'
METADATA_START_DATE='METADATA_START_DATE'
METADATA_START_DATE_TIME='METADATA_START_DATE_TIME'
METADATA_START_DATE_TIME_MSEC='METADATA_START_DATE_TIME_MSEC'
METADATA_START_DATE_TIME_MICROSEC='METADATA_START_DATE_TIME_MICROSEC'
METADATA_STOP_DATE='METADATA_STOP_DATE'
METADATA_STOP_DATE_TIME='METADATA_STOP_DATE_TIME'
METADATA_STOP_DATE_TIME_MICROSEC='METADATA_STOP_DATE_TIME_MICROSEC'
METADATA_START_TIME='METADATA_START_TIME'
METADATA_START_TIME_MSEC='METADATA_START_TIME_MSEC'
METADATA_STOP_TIME_MSEC='METADATA_STOP_TIME_MSEC'
METADATA_STOP_TIME='METADATA_STOP_TIME'
METADATA_STATUS='METADATA_STATUS'
METADATA_SUN_ZENITH='METADATA_SUN_ZENITH'
METADATA_SUN_AZIMUTH='METADATA_SUN_AZIMUTH'
METADATA_SUN_ELEVATION='METADATA_SUN_ELEVATION'
METADATA_TIME_POSITION='METADATA_TIME_POSITION'

METADATA_TIMELINESS='METADATA_TIMELINESS'
METADATA_CODESPACE_TIMELINESS='METADATA_CODESPACE_TIMELINESS'

METADATA_TYPOLOGY='METADATA_TYPOLOGY'
METADATA_TRACK='METADATA_TRACK'
METADATA_THUMBNAIL='METADATA_THUMBNAIL'
METADATA_TYPECODE='METADATA_TYPECODE'
METADATA_URL='METADATA_URL'

#METADATA_EO_BASELINE_VERSION='METADATA_EO_BASELINE_VERSION'
METADATA_SIP_VERSION='METADATA_SIP_VERSION' # is in the SIP filename, the v<VVVV> part
METADATA_PRODUCT_VERSION='METADATA_PRODUCT_VERSION'  # is in the SIP filename, the <vvvv> part
METADATA_SIP_CHANGE_LOG='METADATA_SIP_CHANGE_LOG'
METADATA_SIP_SPEC_NAME_VERSION='METADATA_SIP_SPEC_NAME_VERSION'
METADATA_SIP_SOFTWARE_NAME='METADATA_SIP_SOFTWARE_NAME'
METADATA_SIP_SOFTWARE_VERSION='METADATA_SIP_SOFTWARE_VERSION'

METADATA_VIEWING_ANGLE='METADATA_VIEWING_ANGLE'
METADATA_WRS_LONGITUDE_GRID_NORMALISED='METADATA_WRS_LONGITUDE_GRID_NORMALISED'
METADATA_CODESPACE_WRS_LONGITUDE_GRID_NORMALISED='METADATA_CODESPACE_WRS_LONGITUDE_GRID_NORMALISED'
METADATA_WRS_LATITUDE_GRID_NORMALISED='METADATA_WRS_LATITUDE_GRID_NORMALISED'
METADATA_CODESPACE_WRS_LATITUDE_GRID_NORMALISED='METADATA_CODESPACE_WRS_LATITUDE_GRID_NORMALISED'

METADATA_WRS_LONGITUDE_DEG_NORMALISED='METADATA_WRS_LONGITUDE_DEG_NORMALISED'
METADATA_WRS_LONGITUDE_MDEG_NORMALISED='METADATA_WRS_LONGITUDE_MDEG_NORMALISED'
METADATA_CODESPACE_WRS_LONGITUDE_DEG_NORMALISED='METADATA_CODESPACE_WRS_LONGITUDE_DEG_NORMALISED'
METADATA_WRS_LATITUDE_DEG_NORMALISED='METADATA_WRS_LATITUDE_DEG_NORMALISED'
METADATA_CODESPACE_WRS_LATITUDE_DEG_NORMALISED='METADATA_CODESPACE_WRS_LATITUDE_DEG_NORMALISED'
METADATA_WRS_LATITUDE_MDEG_NORMALISED='METADATA_WRS_LATITUDE_MDEG_NORMALISED'



class Metadata(Base_Metadata):
    #
    METADATA_FIELDS=[METADATA_CLOUD_COVERAGE, METADATA_GENERATION_TIME,METADATA_PRODUCTNAME,METADATA_PRODUCT_SIZE,METADATA_PATH,
                 # for naming conventions; in order to have '#' when no metadata set
                 METADATA_START_DATE,METADATA_STOP_DATE,METADATA_START_TIME,METADATA_STOP_TIME,METADATA_DURATION,METADATA_PROCESSING_STAGE_FLAG,METADATA_PROCESSING_CENTER,
                 METADATA_TYPECODE,METADATA_PLATFORM,METADATA_PLATFORM_ID,METADATA_FILECLASS,METADATA_FOOTPRINT,METADATA_ORBIT,METADATA_TRACK,METADATA_FRAME,METADATA_SIP_VERSION,
                 #
                 METADATA_URL,METADATA_PROCESSING_TIME,METADATA_DATASET_NAME,METADATA_SENSOR_NAME,
                 METADATA_SENSOR_CODE,METADATA_DATA_FILE_PATH,METADATA_DATASET_PRODUCTION_DATE,METADATA_INSTRUMENT_INCIDENCE_ANGLE,METADATA_VIEWING_ANGLE,
                 METADATA_SUN_AZIMUTH,METADATA_SUN_ELEVATION,METADATA_REFERENCE_SYSTEM_IDENTIFIER,METADATA_REPORT_TYPE]


    #
    #
    #
    def __init__(self, defaults=None):
        Base_Metadata.__init__(self)
        self.dict['__METADATATYPE__']=base_metadata.METADATATYPE_PRODUCT
        # a counter, can be used to increment the gml_id in the xml reports
        #self.counter=0
        # other info
        #self.otherInfo={}
        #
        if self.debug!=0:
            print ' init Metadata fields'

        # 2015/11: don't know if it is good to set the default to None
        if 1==2:
            for item in self.METADATA_FIELDS:
                self.dict[item] = None
                if self.debug!=0:
                    print " field %s=%s" % (item, None)

        if defaults is not None:
            if self.debug!=0:
                print ' set default values'
            for item in defaults.iterkeys():
                self.dict[item] = defaults[item]
                if self.debug!=0:
                    print " default %s=%s" % (item, defaults[item])

        #
        self.valids = Valid_Values()
        
        if self.debug!=0:
            print ' init Metadata done'
            

    #
    #
    #
    def eval(self, expr):
        try:
            if not expr[0:5] == 'self.':
                expr="self.%s" % (expr)
            res=eval(expr)
        except:
            xc_type, exc_obj, exc_tb = sys.exc_info()
            res="%s%s%s" % (xc_type, exc_obj, exc_tb)
            traceback.print_exc(file=sys.stdout)
        return res

    #
    #
    #
    def getNextCounter(self):
        self.counter=self.counter+1
        return self.counter

    #
    # return a valid value
    # used to build the xml by sipMessageBuilder.resolveEval()
    #
    def getValidValue(self, name):
        if not self.valids.hasKnownName(name):
            return "VALID %s:%s" % (sipBuilder.VALUE_UNKNOWN, name)
        return self.valids.getValidValue(name)

    #
    # set a valid value
    #
    def setValidValue(self, key, name):
        return self.valids.setValidValue(key, name)

    #
    #
    #
    def clone(self):
        clone = Metadata()
        clone.dict = self.dict.copy()
        clone.counter = self.counter
        clone.debug = self.debug
        clone.xmlNodeUsedMapping = self.xmlNodeUsedMapping.copy()
        clone.xmlVarnameMapping = self.xmlVarnameMapping.copy()
        clone.otherInfo=self.otherInfo.copy()
        clone.localAttributes=list(self.localAttributes)
        clone.label="%s cloned" % self.label
        clone.defined=self.defined

        if self.debug!=0:
            print "CLONED:\nSRC:\n%s" % self.toString()
            print "CLONED:\nDEST:\n%s\n********************* " % clone.toString()
        return clone

    
if __name__ == '__main__':
    met=Metadata()

    print "@@@@@ EMPTY metadata :"
    met.dump()
    met.setMetadataPair('a','aaa')
    met.setMetadataPair('gilles','lavaux')
    print "set a=aaa"
    print "@@@@@ filled metadata :"
    met.dump()
    print "get a:%s" % met.getMetadataValue('a')
    print "get b:%s" % met.getMetadataValue('b')

    clone = met.clone()
    print "@@@@@ cloned metadata :"
    clone.dump()
